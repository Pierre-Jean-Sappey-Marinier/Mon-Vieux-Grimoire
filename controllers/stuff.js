const Thing = require('../models/Thing'); // Thing  reprÃ©sente les objets stockÃ©s dans la base de donnÃ©es.
// router.use(express.json());
const fs = require('fs'); // fs  est un module Node.js qui permet de gÃ©rer les fichiers.

//Ecriture de la route POST dans une base de donnÃ©es
//un endpoint POST qui permet d'ajouter un nouvel objet dans la base de donnÃ©es.
//La mÃ©thode "save" de Mongoose est utilisÃ©e pour enregistrer l'objet dans la base de donnÃ©es
//et la rÃ©ponse JSON contient un message de confirmation.
exports.createThing = (req, res, next) => {
  console.log('ğŸš€ ~ file: stuff.js:11 ~ req:', req);
  const thingObject = JSON.parse(req.body.thing);
  // delete thingObject._id;
  // delete thingObject._userId;
  const thing = new Thing({
    ...thingObject,
    userId: req.auth.userId,
    imageUrl: `${req.protocol}://${req.get('host')}/images/${
      req.file.filename
    }`,
  });

  thing
    .save()
    .then(() => {
      res.status(201).json({ message: 'Objet enregistrÃ© !' });
    })
    .catch((error) => {
      res.status(400).json({ error });
    });
};
// exports.createThing = (req, res, next) => {
//   delete req.body._id;
//   const thing = new Thing({
//     ...req.body,
//   });
//   thing
//     .save()
//     .then(() => res.status(201).json({ message: "Objet enregistrÃ© !" }))
//     .catch((error) => res.status(400).json({ error }));
// };

// Un endpoint PUT qui permet de modifier un objet dans la base de donnÃ©es.
//la mÃ©thode updateOne() de Mongoose pour mettre Ã  jour l'objet correspondant Ã  l'ID spÃ©cifiÃ© dans la requÃªte.
//Cette mÃ©thode prend deux arguments : le premier est un objet de recherche qui spÃ©cifie l'objet Ã  mettre Ã  jour
// en utilisant l'ID fourni dans la requÃªte, et le second est un objet de mise Ã  jour qui contient les nouvelles
// valeurs pour les propriÃ©tÃ©s Ã  mettre Ã  jour de l'objet. Dans ce cas, l'objet de mise Ã  jour est crÃ©Ã© en
// copiant toutes les propriÃ©tÃ©s de la requÃªte body en utilisant la syntaxe de dÃ©versement d'objet,
//puis en Ã©crasant l'ID par dÃ©faut avec l'ID fourni dans la requÃªte params.
exports.modifyThing = (req, res, next) => {
  const thingObject = req.file
    ? {
        ...JSON.parse(req.body.thing),
        imageUrl: `${req.protocol}://${req.get('host')}/images/${
          req.file.filename
        }`,
      }
    : { ...req.body };

  delete thingObject._userId;
  Thing.findOne({ _id: req.params.id })
    .then((thing) => {
      if (thing.userId != req.auth.userId) {
        res.status(401).json({ message: 'Not authorized' });
      } else {
        Thing.updateOne(
          { _id: req.params.id },
          { ...thingObject, _id: req.params.id }
        )
          .then(() => res.status(200).json({ message: 'Objet modifiÃ©!' }))
          .catch((error) => res.status(401).json({ error }));
      }
    })
    .catch((error) => {
      res.status(400).json({ error });
    });
};

// exports.modifyThings = (req, res, next) => {
//   Thing.updateOne({ _id: req.params.id }, { ...req.body, _id: req.params.id })
//     .then(() => res.status(200).json({ message: "Objet modifiÃ© !" }))
//     .catch((error) => res.status(400).json({ error }));
// };

// un endpoint DELETE qui permet de supprimer un objet Ã  partir de l'ID dans l'URL
//Thing.deleteOne({ _id: req.params.id }) utilise la mÃ©thode deleteOne de Mongoose pour supprimer un objet
// de la base de donnÃ©es. Elle prend en paramÃ¨tre un objet de filtre qui spÃ©cifie quel objet doit Ãªtre supprimÃ©.
//Ici, l'objet de filtre est { _id: req.params.id }, oÃ¹ _id correspond Ã  l'ID de l'objet Ã  supprimer, qui est
//fourni dans l'URL en utilisant req.params.id
exports.deleteThings = (req, res, next) => {
  Thing.findOne({ _id: req.params.id })
    .then((thing) => {
      if (thing.userId != req.auth.userId) {
        res.status(401).json({ message: 'Not authorized' });
      } else {
        const filename = thing.imageUrl.split('/images/')[1];
        fs.unlink(`images/${filename}`, () => {
          Thing.deleteOne({ _id: req.params.id })
            .then(() => res.status(200).json({ message: 'Objet supprimÃ© !' }))
            .catch((error) => res.status(400).json({ error }));
        });
      }
    })
    .catch((error) => {
      res.status(500).json({ error });
    });
};
// exports.deleteThings = (req, res, next) => {
//   Thing.deleteOne({ _id: req.params.id })
//     .then(() => res.status(200).json({ message: "Objet supprimÃ© !" }))
//     .catch((error) => res.status(400).json({ error }));
// };

// un endpoint GET qui permet de rÃ©cupÃ©rer un objet Ã  partir de l'ID dans l'URL
//Lorsque l'API reÃ§oit une requÃªte GET sur l'URL "/:id", elle appelle une fonction
//middleware qui rÃ©cupÃ¨re l'ID de l'objet dans la variable "req.params.id".
//Ensuite, la fonction middleware utilise la mÃ©thode "findOne" de l'objet "Thing" pour
//rÃ©cupÃ©rer l'objet correspondant Ã  cet ID dans la base de donnÃ©es.
//Si l'objet est trouvÃ©, il est renvoyÃ© au client sous forme de rÃ©ponse JSON
exports.getThingFromId = (req, res, next) => {
  Thing.findOne({ _id: req.params.id })
    .then((thing) => res.status(200).json(thing))
    .catch((error) => res.status(404).json({ error }));
};

//un endpoint GET qui permet de rÃ©cupÃ©rer tous les objets de la base de donnÃ©es
exports.getAllThings = (req, res, next) => {
  Thing.find()
    .then((things) => res.status(200).json(things))
    .catch((error) => res.status(400).json({ error }));
};
